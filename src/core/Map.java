/*
 * The main map class, holds all of the information needed to make the map.xml
 */
package core;

import info.*;
import helpers.TNode;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import spawn.Kit;

public class Map {

    protected String name, objective, version, PGMVersion;
    public ComplexList<Author> authors = new ComplexList("authors");
    public ComplexList<Author> contributors;
    public ComplexList<Rule> rules;
    public ComplexList<Team> teams;
    public ComplexList<Kit> kits;
    public ComplexList filters, regions, spawns, portals;
    public Element root;
    //rules, teams;

    public Map() {
        contributors = new ComplexList<Author>("contributors");
        rules = new ComplexList<Rule>("rules");
        teams = new ComplexList<Team>("teams");
        kits = new ComplexList<Kit>("kits");
        regions = new ComplexList("regions");
        filters = new ComplexList("filters");
        spawns = new ComplexList("spawns");
        portals = new ComplexList("portals");

    }
    //Calls the output() of the given Complex List if it is not empty

    private void outputIfPopulated(ComplexList li, Document doc, Element elem) {
        if (!li.isEmpty()) {
            elem.appendChild(li.output(doc));
        }
    }
    //Starts the xml writing process, and spits it out to a file

    public void output(String loc) {
        try {
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.newDocument();

            root = doc.createElement("map");
            root.setAttribute("proto", getPGMVersion());
            //Insert info about how this was created
            root.appendChild(doc.createComment("Generated by " + PAXE.program_name + " " + PAXE.version));

            root.appendChild(new TNode("name", getName(), doc).tag);
            root.appendChild(new TNode("version", getVersion(), doc).tag);
            root.appendChild(new TNode("objective", getObjective(), doc).tag);
            outputIfPopulated(authors, doc, root);
            outputIfPopulated(contributors, doc, root);
            outputIfPopulated(rules, doc, root);
            outputIfPopulated(teams, doc, root);
            outputIfPopulated(kits, doc, root);
            outputIfPopulated(regions, doc, root);
            outputIfPopulated(filters, doc, root);
            outputIfPopulated(spawns, doc, root);
            outputIfPopulated(portals, doc, root);

            doc.appendChild(root);

            //output
            //set up a transformer
            Transformer trans = TransformerFactory.newInstance().newTransformer();
            trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            trans.setOutputProperty(OutputKeys.INDENT, "yes");
            trans.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "3");

            //create string from xml tree
            StringWriter sw = new StringWriter();
            trans.transform(new DOMSource(doc), new StreamResult(sw));

            //write to file
            PrintWriter pw = new PrintWriter(new File(loc));
            pw.print(sw.toString());
            pw.close();


        } catch (ParserConfigurationException pce) {
            pce.printStackTrace();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getObjective() {
        return objective;
    }

    public void setObjective(String objective) {
        this.objective = objective;
    }

    public String getVersion() {
        return version;
    }

    public void setVersion(String version) {
        this.version = version;
    }

    public String getPGMVersion() {
        return PGMVersion;
    }

    public void setPGMVersion(String PGMVersion) {
        this.PGMVersion = PGMVersion;
    }
}
